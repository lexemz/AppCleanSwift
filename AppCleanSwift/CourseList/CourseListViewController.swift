//
//  CourseListViewController.swift
//  AppCleanSwift
//
//  Created by Igor on 11.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CourseListDisplayLogic: AnyObject {
    func displayCourses(viewModel: CourseList.Something.ViewModel)
}

class CourseListViewController: UITableViewController {
        
    var interactor: CourseListBusinessLogic?
    var router: (NSObjectProtocol & CourseListRoutingLogic & CourseListDataPassing)?
    
    private var courses: [Course] = []
    
    // init не нужны, так как это стартовый экран
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        CourseListConfigurator.shared.configure(with: self)
        tableView.rowHeight = 100
        title = "Courses"
        
        getCourses()
        
        doSomething()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let courseDetailsVC = segue.destination as? CourseDetailsViewController else { return }
        guard let indexPath = tableView.indexPathForSelectedRow else { return }
        courseDetailsVC.course = courses[indexPath.row]
    }
    
    // MARK: Routing
//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }
        
    private func doSomething() {
        let request = CourseList.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    private func getCourses() {
        NetworkManager.shared.fetchCourses { [weak self] result in
            switch result {
            case .success(let courses):
                self?.courses = courses
                self?.tableView.reloadData()
            case .failure(let error):
                print(error)
            }
        }
    }
}

extension CourseListViewController: CourseListDisplayLogic {
    func displayCourses(viewModel: CourseList.Something.ViewModel) {
        
    }
}


// MARK: - UITableViewDataSource
extension CourseListViewController {
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        courses.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CourseCell", for: indexPath) as! CourseListViewCell
        let course = courses[indexPath.row]
        cell.configure(with: course)
        return cell
    }
}
